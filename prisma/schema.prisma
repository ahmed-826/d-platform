generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  superAdmin
  admin
  user
}

enum UserStatus {
  active
  banned
  deleted
}

enum UploadType {
  form
  file
  api
}

enum UploadStatus {
  pending
  processing
  completed
  failed
}

enum NerCategory {
  person
  organization
  location
}

enum FicheStatus {
  valid
  suspended
  canceled
}

enum DocumentType {
  File
  Message
  Attachment
}

// Models
model User {
  id        String     @id @default(uuid()) @db.Uuid
  username  String     @unique
  role      UserRole   @default(user)
  password  String
  createdAt DateTime   @default(now())
  createdBy String?
  status    UserStatus @default(active)
  uploads   Upload[]
}

model Upload {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  date         DateTime      @default(now())
  type         UploadType    @default(api)
  status       UploadStatus  @default(pending)
  path         String
  fileName     String
  hash         String        @unique
  userId       String        @db.Uuid
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  fiches       Fiche[]
  failedFiches FailedFiche[]
}

model Source {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  description String?
  fiches      Fiche[]
}

model Ner {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  category    NerCategory
  description String?
  fichesNers  FicheNer[]
}

model Fiche {
  id  String @id @default(uuid()) @db.Uuid
  ref String

  sourceId  String   @db.Uuid
  source    Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  date      DateTime @default(now())
  object    String
  summary   String
  createdBy String?

  dateDistribute DateTime?
  path           String      @unique
  hash           String      @unique
  status         FicheStatus @default(suspended)
  dump           String?
  uploadId       String      @db.Uuid
  upload         Upload      @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  documents      Document[]
  ficheNers      FicheNer[]

  observations Fiche[] @relation("FicheObservations") // Fiches that THIS fiche observes
  observedBy   Fiche[] @relation("FicheObservations") // Fiches that observe THIS fiche
}

model FicheNer {
  id          String  @id @default(uuid()) @db.Uuid
  ficheId     String  @db.Uuid
  fiche       Fiche   @relation(fields: [ficheId], references: [id], onDelete: Cascade)
  nerId       String  @db.Uuid
  ner         Ner     @relation(fields: [nerId], references: [id], onDelete: Cascade)
  description String?

  @@unique([ficheId, nerId])
}

model Document {
  id            String       @id @default(uuid()) @db.Uuid
  type          DocumentType
  content       String?
  meta          Json?
  path          String       @unique
  sourcePath    String?      @unique
  reportingPath String?
  hash          String       @unique
  ficheId       String?      @db.Uuid
  fiche         Fiche?       @relation(fields: [ficheId], references: [id], onDelete: Cascade)

  emailId     String?    @db.Uuid
  email       Document?  @relation("EmailAttachments", fields: [emailId], references: [id], onDelete: Cascade)
  attachments Document[] @relation("EmailAttachments")
}

model FailedFiche {
  id       String    @id @default(uuid()) @db.Uuid
  date     DateTime?
  dump     String?
  uploadId String    @db.Uuid
  upload   Upload    @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  path     String?
  fileName String?
  message  String?
}
