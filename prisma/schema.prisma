generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  SuperAdmin
  Admin
  User
}

enum UserStatus {
  Active
  Banned
  Deleted
}

enum UploadType {
  Form
  File
  API
}

enum UploadStatus {
  Pending
  Processing
  Completed
  Failed
}

enum NerCategory {
  Person
  Organization
  Location
}

enum FicheStatus {
  Valid
  Suspended
  Canceled
}

enum DocumentType {
  File
  Email
  Attachment
}

// Models
model User {
  id        String    @id @default(uuid()) @db.Uuid
  username  String    @unique
  role      UserRole  @default(User)
  password  String
  createdAt DateTime  @default(now())
  createdBy String?
  status    UserStatus @default(Active)

  uploads   Upload[] // Do not add onDelete here
}

model Upload {
  id        String    @id @default(uuid()) @db.Uuid
  name      String    
  date      DateTime  @default(now())
  type      UploadType @default(API)
  status    UploadStatus @default(Pending)
  path      String?
  fileName  String?
  hash      String   @unique
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Add onDelete here
  
  fiches        Fiche[]          // Do not add onDelete here
  failedFiches  FailedFiche[]    // Do not add onDelete here
}

model Source {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @unique
  description String?

  dumps       Dump[]   // Do not add onDelete here
}

model Dump {
  id            String   @id @default(uuid()) @db.Uuid
  name          String   @unique
  dateCollect   DateTime?
  description   String?
  sourceId      String   @db.Uuid
  source        Source   @relation(fields: [sourceId], references: [id], onDelete: Cascade) // Add onDelete here

  fiches        Fiche[]          // Do not add onDelete here
  failedFiches  FailedFiche[]    // Do not add onDelete here
}

model Ner {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  category    NerCategory
  description String?

  fichesNers  FicheNer[] // Do not add onDelete here
}

model Fiche {
  id             String       @id @default(uuid()) @db.Uuid
  ref            String
  object         String?
  summary        String?
  dateGenerate   DateTime     @default(now())
  dateDistribute DateTime?
  status         FicheStatus  @default(Suspended)
  path           String        @unique
  hash           String        @unique
  dumpId         String        @db.Uuid
  dump           Dump          @relation(fields: [dumpId], references: [id], onDelete: Cascade) // Add onDelete here
  uploadId       String        @db.Uuid
  upload         Upload      @relation(fields: [uploadId], references: [id], onDelete: Cascade) // Add onDelete here

  documents      Document[]    // Do not add onDelete here
  ficheNers      FicheNer[]    // Do not add onDelete here
  observations   FicheRelation[] @relation("FicheObservations") // Do not add onDelete here
  observedBy     FicheRelation[] @relation("FicheObservedBy")   // Do not add onDelete here
}

model FicheRelation {
  id            String   @id @default(uuid()) @db.Uuid
  observerId    String   @db.Uuid
  observedId    String   @db.Uuid

  observer      Fiche    @relation("FicheObservedBy", fields: [observerId], references: [id], onDelete: Cascade) // Add onDelete here
  observed      Fiche    @relation("FicheObservations", fields: [observedId], references: [id], onDelete: Cascade) // Add onDelete here

  @@unique([observerId, observedId])
}

model FicheNer {
  id          String   @id @default(uuid()) @db.Uuid
  ficheId     String   @db.Uuid
  fiche       Fiche    @relation(fields: [ficheId], references: [id], onDelete: Cascade) // Add onDelete here
  nerId       String   @db.Uuid
  ner         Ner      @relation(fields: [nerId], references: [id], onDelete: Cascade) // Add onDelete here
  description String?

  @@unique([ficheId, nerId])
}

model Document {
  id           String       @id @default(uuid()) @db.Uuid
  type         DocumentType
  content      String?
  meta         Json?
  path         String     @unique
  rpPath       String?
  hash         String       @unique
  ficheId      String      @db.Uuid
  fiche        Fiche       @relation(fields: [ficheId], references: [id], onDelete: Cascade) // Add onDelete here
}

model FailedFiche {
  id           String   @id @default(uuid()) @db.Uuid
  dateGenerate DateTime?
  dumpId       String?  @db.Uuid
  dump         Dump?    @relation(fields: [dumpId], references: [id], onDelete: Cascade) // Add onDelete here
  uploadId     String   @db.Uuid
  upload       Upload   @relation(fields: [uploadId], references: [id], onDelete: Cascade) // Add onDelete here
  path         String?  
  fileName     String?
  message      String?  
}